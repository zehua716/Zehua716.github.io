[{"content":"图像恢复 \u0026mdash; TP1 图像反卷积：Wiener-Hunt 方法 主要针对图像去模糊问题，即从模糊(带噪)图像中恢复清晰图像。这属于逆问题的范畴，一半出现在处理真实测量系统时。由于每个测量系统（如温度计、CCD相机、光谱仪等）都受到基础物理学的限制，比如有限精度、有限动态范围、非零响应时间等。这意味着测得的量或多或少都有扭曲。因此这部分是对感兴趣物理量的某种扭曲程度的度量。\n大多数情况下，测量系统直接给出的测量数据通常具有足够的精度和鲁棒性。但是，也存在测量结果不准确的情况。为了解决精度问题，或者说至少部分地优化它，已经开发了特殊的信号和图像处理技术。在接下来的内容中，我们将通过一个简单的例子来展示此类方法。\n我们有一张未聚焦的图像。这种情况下，点的图像实际上会是一个斑点。捕获的图像将会因为模糊而受损，因为它是由真实图像中每个点生成的斑点的叠加结果。\n描述这种转换的最简单模型是线性不变滤波器，即卷积。示意图如下图所示。\n![image-20240909002355073](/Users/zehua/Library/Application Support/typora-user-images/image-20240909002355073.png)\n在上面的示意图中，$x_{n,m}$ 代表真实或原始图像，$y_{n,m}$ 代表观测到的图像，或者更确切地说，是我们通过相机拍到的未聚焦图像。添加分量 $b_{n,m}$ 是为了考虑测量和建模误差。\n描述测量过程的方程(二维)如下： $$ y_{n,m} = \\sum_{p=-P}^{P} \\sum_{q=-Q}^{Q} h_{p,q} x_{n-p,m-q} + b_{n,m} $$ $y_{n,m}$ 是对于每个观测到的像素 $(n, m)$。在这个公式中，$P$ 和 $Q$ 是给定的整数。\n注意，滤波器通常来说都是低通滤波器，这就意味着它们无法准确地在输出中再现输入信号或图像中的所有分量，因为高频分量要么被强烈衰减，要么完全被拒绝，这也就是为什么 \u0026lsquo;\u0026lsquo;恢复真实信号\u0026rsquo;\u0026lsquo;或者说\u0026rsquo;\u0026lsquo;图像的逆问题\u0026rsquo;\u0026rsquo; 是如此困难：必须恢复那些要么完全不存在、要么“错误”观测到的高频分量。\n在下面的例子中，我们用线性方法来解决图像反卷积问题。这些线性方法依赖于最小二乘准则，并结合了二次惩罚。我们先介绍其理论部分，包括这些准则及其最小化器。此外，展示背后的技术细节，并提出了一种基于循环近似的方法，以实现快速的数值计算。\n1. 一维反卷积 为了简化理论概念，我们先讨论在一维情况下的信号反卷积。这种简化情况允许对反卷积问题的分析更加深入，同时更容易掌握概念和思路。随后再引入二维情况，并将其视为一维情况的扩展。Matlab 实现部分仅涉及二维情况。\n1.1 一维建模 在一维情况下，(1) 中给出的观测模型变为：\n$$ y_n = \\sum_{p=-P}^{P} h_p x_{n-p} + b_n $$\n如果我们有 $N$ 个样本，可以将相应的 $N$ 个方程写成矩阵形式： $$ \\mathbf{y} = \\mathbf{H} \\mathbf{x} + \\mathbf{b} $$\n向量 $\\mathbf{y}$ 包含了所有的 $N$ 个观测值（在二维情况下，它将包含模糊的图像）。\n向量 $\\mathbf{x}$ 包含了恢复信号或图像的样本，而 $\\mathbf{b}$ 是噪声样本。\n矩阵 $\\mathbf{H}$，称为模糊矩阵，具有以下经典结构：\n$$ H = \\begin{bmatrix} h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\\\ 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\\\ 0 \u0026amp; 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; \\cdots \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; \\cdots \\\\ \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \\end{bmatrix} $$\n​\t$$H = \\begin{bmatrix}h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\ 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\ 0 \u0026amp; 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; \\cdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; \\cdots \\ \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \\end{bmatrix}$$\n$\\mathbf{H}$ 是一个 $N \\times N$ 的方阵，并且具有 Toeplitz 结构。 因此，信号反卷积问题可以重新表述为: 在已知观测信号 $\\mathbf{y}$ 并知道卷积矩阵 $H$ 的情况下，估计向量 $\\mathbf{x}$\n1.2 带惩罚的最小二乘法 提出的重建策略 (损失函数) 是一种带惩罚的最小二乘法。它包含两个部分：\n一个重构损失项，用于量化恢复信号 $\\mathbf{x}$ 与观测信号 $\\mathbf{y}$ 进行重新卷积后的相似性，从而确保恢复的信号与观测信号一致。 一个惩罚项，用于限制恢复信号的连续样本之间的差异，确保其具有一定的规则性结构。 该准则采用以下表达式：\n$$ J_{\\text{PLS}}(x) = | y - Hx |^2 + \\mu | Dx |^2 = (y - Hx)^t (y - Hx) + \\mu x^t D^t D x $$\n其中，$D$ 是阶数为 1，大小为 $(N - 1) \\times N$ 的差分矩阵，定义如下：\n$$ D = \\begin{bmatrix} \\cdots \u0026amp; -1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\ \\cdots \u0026amp; 0 \u0026amp; -1 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\cdots \\ \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \\ \\cdots \u0026amp; 0 \u0026amp; 0 \u0026amp; -1 \u0026amp; 1 \u0026amp; \\cdots \\end{bmatrix} $$\n带惩罚的最小二乘准则的最小化器为： $$ \\hat{x} = (H^t H + \\mu D^t D)^{-1} H^t y $$\n[!IMPORTANT]\n证明: $$ \\hat{x} = (H^T H + \\mu D^T D)^{-1} H^T y $$ 我们已知损失准则为: $$ J_{PLS}(x) = (y - Hx)^T(y - Hx) + \\mu x^T D^T Dx $$\n$$ J_{PLS}(x) = y^T y - 2x^T H^T y + x^T H^T H x + \\mu x^T D^T D x $$\n求偏导为0: $$ \\frac{\\partial J_{PLS}(x)}{\\partial x} = -2H^T y + 2H^T H x + 2\\mu D^T D x = 0 $$\n$$ (H^T H + \\mu D^T D) x = H^T y $$\n$$ \\hat{x} = (H^T H + \\mu D^T D)^{-1} H^T y $$\n[!NOTE]\n特殊情况：\n在特定情况下 $\\mu = 0$ 时准则和最小化器的结果表达式变为 $ J_{PLS}(x) = |y - Hx|^2$\n最小化器方程为： $$ H^T H x = H^T y $$\n$$ \\hat{x} = (H^T H)^{-1} H^T y $$\n此时准则变为经典的最小二乘问题，没有正则化项，也就是说，模型仅考虑最小化观测值与预测值之间的误差，而不会惩罚解的复杂度或平滑性。其解是经典的 最小二乘解。\n1.2.1 循环近似 回到公式 (9) ，我们已知矩阵 $H^T H + \\mu D^T D$ 的大小为 $N \\times N$，当 $N$ 很大时，这种反演在计算上非常昂贵甚至不可行。\n比如说在处理图像时，比如对于 $1000 \\times 1000$ 的图像，矩阵的大小为 $10^6 \\times 10^6$ ，计算不了。在三维情况下，更复杂。\n因此为了计算 $\\hat{x}$，有几种方法可以克服这种大计算量的困难。\n下面我们考虑使用循环矩阵的特性，因为我们可以用对角矩阵来 “替换” 公式 (9) 中的矩阵 (通过快速傅里叶变换 FFT 可以将循环矩阵 “转化”为对角矩阵)。因此，使用对角矩阵进行计算时，乘法或反演等矩阵运算的复杂度将大大降低。\n但是，这需要先将矩阵 $H$ 和 $D$ 近似为循环矩阵 $\\tilde{H}$ 和 $\\tilde{D}$。\n循环近似涉及修改矩阵的右上角和/或左下角部分，使其具有循环结构。这种近似的核心假设是信号或图像在开始和结束部分是周期性的，即信号的末尾与开头相连接，形成一个环状结构。\n循环卷积矩阵 $\\tilde{H}$ 和 $\\tilde{D}$ 在傅里叶基下可以轻松对角化： $$ \\tilde{H} = F^T \\Lambda_h F \\quad \\text{和} \\quad \\tilde{D} = F^T \\Lambda_d F $$ 矩阵 $\\Lambda_h$ 是对角矩阵，其对角线上元素是 $H$ 的特征值。\n特征值可以通过对矩阵 $H$ 第一行进行快速傅里叶变换（FFT）获得，即计算脉冲响应的 N 点 FFT，这些响应代表频率响应的样本。\n同样适用于矩阵 $\\tilde{D}$ 及其特征值，其中将脉冲响应替换为 $[-1, 1]$。\n通过在 (9) 中用 (18) 代替，并使用简单的矩阵操作，可以得到： $$ \\overset{\\circ}{\\hat{x}} = (\\Lambda_{h}^{\\dagger} \\Lambda_{h} + \\mu \\Lambda_{d}^{\\dagger} \\Lambda_{d})^{-1} \\Lambda_{h}^{\\dagger} \\overset{\\circ}{y} $$\n证明：\n补充知识: $\\tilde{H}$ 是一个实矩阵，因此其复共轭等于它本身，$\\tilde{H} = \\tilde{H}^T$ 。 $\\tilde{D}$ 同理\n在近似为循环矩阵后，公式 (15) 变为: $$ \\hat{x} = (\\tilde{H}^{T}\\tilde{H} + \\mu \\tilde{D}^{T}\\tilde{D})^{-1}\\tilde{H}^{T}y $$ 其中: $\\tilde{H} = F^T \\Lambda_h F$ 且 $ \\tilde{D} = F^T \\Lambda_d F$ 将其带入上述公式，得: $$ \\hat{x} = ((F^{T}\\Lambda_{h}F)^{T}(F^{T}\\Lambda_{h}F) + \\mu (F^{T}\\Lambda_{d}F)^{T}(F^{T}\\Lambda_{d}F))^{-1}(F^{T}\\Lambda_{h}F)^{T}y $$ 因为傅里叶矩阵 $F$ 是一个正交矩阵，具有 $F F^{T} = I$ 的性质，即 $F^{T} = F^{-1}$\n并且我们有 $(F^{T}\\Lambda_{h}F)^{T} = F^{T}\\Lambda_{h}^{T}F$ 以及 $(F^{T}\\Lambda_{d}F)^{T} = F^{T}\\Lambda_{d}^{T}F$\n所以: $$ \\hat{x} = (F^{T}\\Lambda_{h}^{T}\\Lambda_{h}F + \\mu F^{T}\\Lambda_{d}^{T}\\Lambda_{d}F)^{-1} F^{T}\\Lambda_{h}^{T}F y $$\n$$ \\hat{x} = F^{T}(\\Lambda_{h}^{T}\\Lambda_{h} + \\mu \\Lambda_{d}^{T}\\Lambda_{d})^{-1} \\Lambda_{h}^{T}F y $$\n$$ 令\\ \\ \\ \\overset{\\circ}{\\hat{x}} = F \\hat{x}, \\quad \\overset{\\circ}{y} = F y $$\n那么: $$ \\overset{\\circ}{\\hat{x}} = (\\Lambda_{h}^{\\dagger} \\Lambda_{h} + \\mu \\Lambda_{d}^{\\dagger} \\Lambda_{d})^{-1} \\Lambda_{h}^{\\dagger} \\overset{\\circ}{y} $$ 证毕。\n[!NOTE]\n特殊情况：\n当 $\\mu = 0$ 时，正则化项消失，公式简化为： $$ \\overset{\\circ}{\\hat{x}} = (\\Lambda_{h}^{\\dagger} \\Lambda_{h})^{-1} \\Lambda_{h}^{\\dagger} \\overset{\\circ}{y} $$ 这意味着我们仅仅执行了经典的 Wiener 去卷积，没有考虑图像的正则化。 $$ \\hat{x} = (\\tilde{H}^{T}\\tilde{H} )^{-1}\\tilde{H}^{T}y\\ $$\n没有正则化时，虽然理论上可以恢复原始信号，但是实际上收到的噪声影响很大，且没有约束来将其消除\n为了完成我们的讨论，我们首先构建向量 $g_{\\text{PLS}}$，其分量定义如下： $$ g_{PLS}^{n} = \\frac{\\overset{\\circ}{h}{n}^{*}}{|\\overset{\\circ}{h}{n}|^2 + \\mu |\\overset{\\circ}{d}{n}|^2} \\quad \\text{for } n = 1, 2, \\dots, N $$ 因此，向量 $\\overset{\\circ}{\\hat{x}}$ 是通过向量 $g{\\text{PLS}}$ 和 $\\overset{\\circ}{\\hat{y}}$ 之间逐元素相乘得到的： $$ \\overset{\\circ}{\\hat{x}} = g_{\\text{PLS}} .* \\overset{\\circ}{\\hat{y}} $$ 反卷积问题可以表述为在傅里叶域中进行的滤波操作，其中 $g_{\\text{PLS}}$ 代表离散传递函数。\n反卷积问题总结如下：\n① 构建 $\\mathring{h}$ 作为脉冲响应的 $N$ 点 FFT\n② 构建 $\\mathring{d}$ 作为 $[1; -1]$ 的 $N$ 点 FFT\n③ 构建包含传递函数 $g_{\\text{PLS}}$ 的向量\n④ 构建观测值的 FFT $\\mathring{y}$\n⑤ 计算 $\\mathring{\\hat{x}}$，作为传递函数 $g_{\\text{PLS}}$ 和 $\\mathring{\\hat{y}}$ 的乘积\n⑥ 计算 $\\mathring{\\hat{x}}$ 的 IFFT 以在空间域中获得解 $\\hat{x}$\n2 实现 2.1 二维方法 对于二维情况，可以给出类似于一维情况的方程。然而，所涉及的矩阵结构更加复杂: block-Tœplitz 矩阵，每个块本身也具有 Tœplitz 结构。这使得在两个方向上进行循环近似变得更加困难。因此，二维情况仅作为一维情况的扩展来展示，重点是 Matlab 实现。\n注意以下几点：\n图像、脉冲响应、正则化项都是二维的，这意味着必须使用 FFT-2D 而不是 FFT。 更确切地说，如果要恢复的图像有 N 行和 N 列，那么 FFT-2D 必须在 N 行和 N 列上计算。 频率传递函数也是二维的，每个空间频率有一个维度。 特别说明 — 在任何情况下，矩阵 H 和 D 都不应在 Matlab 代码中构建。\n2.2 观测图像 第一步是加载文件 Data1 和 Data2 中提供的数据。这可以通过使用 load 函数完成。每个文件包含：模糊图像 (Data)、用于比较的真实图像 (TrueIma)，以及卷积滤波器的脉冲响应 (IR)。现在分析每个数据集及其相互关系。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 close all, clear all clc %% 第1部分：加载图像数据 % 加载第一组数据，包括模糊图像和真实图像 DataOne = load(\u0026#39;DataOne.mat\u0026#39;); image_One = DataOne.Data; True_image_One = DataOne.TrueImage; % 加载第二组数据，包括模糊图像和真实图像 DataTwo = load(\u0026#39;DataTwo.mat\u0026#39;); image_Two = DataTwo.Data; True_image_Two = DataTwo.TrueImage; %% 第2部分：显示两幅图像 % 创建一个图形窗口以显示两幅图像 figure(1), clf % 显示第一幅图像 subplot(1, 2, 1) imagesc(image_One) colormap(\u0026#39;gray\u0026#39;) colorbar axis square off title(\u0026#39;Image One\u0026#39;) % 显示第二幅图像 subplot(1, 2, 2) imagesc(image_Two) colormap(\u0026#39;gray\u0026#39;) colorbar axis square off title(\u0026#39;Image Two\u0026#39;) 对每个观察到的图像的模糊程度进行评论。 在频域中分析图像（同时使用线性和对数刻度）并提供适当的评论。花时间识别两个频率轴，必须正确标注零频率、低频、高频等。在你的报告中适当地展示这些结果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 %% 第3部分：图像的频域分析 % 计算第一幅图像的二维傅里叶变换，并将零频移到中心 fft_image_One = MyFFT2(image_One); fft_image_One_shifted = fftshift(fft_image_One); % 计算第一幅图像频谱的幅值 magnitude_spectrum_One = abs(fft_image_One_shifted); % 计算第二幅图像的二维傅里叶变换，并将零频移到中心 fft_image_Two = MyFFT2(image_Two); fft_image_Two_shifted = fftshift(fft_image_Two); % 计算第二幅图像频谱的幅值 magnitude_spectrum_Two = abs(fft_image_Two_shifted); % 生成频率轴，用于第一幅图像 rows_One = size(image_One, 1); % 获取行数 cols_One = size(image_One, 2); % 获取列数 freq_axis_One = -0.5 : 1/cols_One : 0.5 - 1/cols_One; % 创建频率轴 freq_axis_One = fftshift(freq_axis_One); % 将频率轴中心化 % 生成频率轴，用于第二幅图像 rows_Two = size(image_Two, 1); cols_Two = size(image_Two, 2); freq_axis_Two = -0.5 : 1/cols_Two : 0.5 - 1/cols_Two; freq_axis_Two = fftshift(freq_axis_Two); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 %% 第4部分：显示频谱分析结果 % 在线性尺度下显示第一幅图像的频谱 figure(3), clf subplot(2, 2, 1) imagesc(freq_axis_One, freq_axis_One, magnitude_spectrum_One) colormap(\u0026#39;jet\u0026#39;) axis square title(\u0026#39;Image One - Échelle Linéaire\u0026#39;) xlabel(\u0026#39;Fréquence horizontale (axe de fréquence)\u0026#39;) ylabel(\u0026#39;Fréquence verticale (axe de fréquence)\u0026#39;) % 在线性尺度下显示第二幅图像的频谱 subplot(2, 2, 2) imagesc(freq_axis_Two, freq_axis_Two, magnitude_spectrum_Two) colormap(\u0026#39;jet\u0026#39;) axis square title(\u0026#39;Image Two - Échelle Linéaire\u0026#39;) xlabel(\u0026#39;Fréquence horizontale (axe de fréquence)\u0026#39;) ylabel(\u0026#39;Fréquence verticale (axe de fréquence)\u0026#39;) % 在对数尺度下显示第一幅图像的频谱 subplot(2, 2, 3) imagesc(freq_axis_One, freq_axis_One, log(1 + magnitude_spectrum_One)) colormap(\u0026#39;jet\u0026#39;) axis square title(\u0026#39;Image One - Échelle Logarithmique\u0026#39;) xlabel(\u0026#39;Fréquence horizontale (axe de fréquence)\u0026#39;) ylabel(\u0026#39;Fréquence verticale (axe de fréquence)\u0026#39;) % 在对数尺度下显示第二幅图像的频谱 subplot(2, 2, 4) imagesc(freq_axis_Two, freq_axis_Two, log(1 + magnitude_spectrum_Two)) colormap(\u0026#39;jet\u0026#39;) axis square title(\u0026#39;Image Two - Échelle Logarithmique\u0026#39;) xlabel(\u0026#39;Fréquence horizontale (axe de fréquence)\u0026#39;) ylabel(\u0026#39;Fréquence verticale (axe de fréquence)\u0026#39;) ​\t•\t零频率 位于图像的中心，对应图像中的平均亮度。零频率处的值越高，意味着图像的整体亮度较高。\n​\t•\t低频成分 主要反映图像中的大尺度结构或平滑区域。低频越强，图像的模糊程度越高。\n​\t•\t高频成分 对应图像的细节和边缘。模糊的图像高频成分较少，这表明细节被模糊化了。\n显示两个脉冲响应 $h_{n,m}$ 及其关联的传递函数 $H(\\nu_x, \\nu_y)$ 。\n首先使用 imagesc 函数，然后使用 plot 函数。正确地在每个轴上标记它们。在你的报告中适当地展示这些结果。什么类型的滤波器是它们？高通还是低通？两个滤波器之间的差异是什么？\n低通滤波器 (Low-pass)：如果滤波器主要通过低频信号而衰减高频信号.在传递函数的频率响应中，低频区域的幅值较高，而高频区域的幅值较低。如果传递函数的中心区域（即低频部分）有较强的响应，而边缘（高频部分）较弱，则该滤波器是低通滤波器；反之，如果高频部分较强，则是高通滤波器。\n假设有两个不同的脉冲响应 h_1 和 h_2 ，可以分别计算它们的传递函数，并比较它们的频率响应\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 %% 第5部分：显示脉冲响应和传递函数 % 加载第一组数据的脉冲响应 h1 = DataOne.IR; % 加载第二组数据的脉冲响应 h2 = DataTwo.IR; % 计算第一幅图像的脉冲响应的傅里叶变换 H1 = abs(MyFFT2RI(h1,length(image_One))); % 计算第二幅图像的脉冲响应的傅里叶变换 H2 = abs(MyFFT2RI(h2,length(image_Two))); % 计算第一幅图像的传递函数 transfer_function_h1 = MyFFT2RI(h1, size(image_One, 1)); % 计算第二幅图像的传递函数 transfer_function_h2 = MyFFT2RI(h2, size(image_Two, 1)); % 显示第一幅图像的脉冲响应和传递函数 figure(4), clf subplot(2, 2, 1) imagesc(H1) axis square off title(\u0026#39;Réponse Impulsionnelle H1[n,m]\u0026#39;) colormap(\u0026#39;gray\u0026#39;) subplot(2, 2, 2) imagesc(fftshift(log(1 + abs(transfer_function_h1)))) axis square off title(\u0026#39;Fonction de Transfert H1(νx, νy)\u0026#39;) colormap(\u0026#39;jet\u0026#39;) % 显示第二幅图像的脉冲响应和传递函数 subplot(2, 2, 3) imagesc(H2) axis square off title(\u0026#39;Réponse Impulsionnelle H2[n,m]\u0026#39;) colormap(\u0026#39;gray\u0026#39;) subplot(2, 2, 4) imagesc(fftshift(log(1 + abs(transfer_function_h2)))) axis square off title(\u0026#39;Fonction de Transfert H2(νx, νy)\u0026#39;) colormap(\u0026#39;jet\u0026#39;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 %% 第6部分：使用 plot 显示传递函数沿某一线的切片 % 显示第一幅图像的传递函数沿 νx 方向的切片 figure(5), clf line_profile_One = abs(fftshift(fft(H1(size(H1, 1)/2, :)))); subplot(2, 1, 1) plot(line_profile_One) title(\u0026#39;Transfer Function H1(νx) along a Line\u0026#39;) xlabel(\u0026#39;Frequency (νx)\u0026#39;) ylabel(\u0026#39;Magnitude\u0026#39;) % 显示第二幅图像的传递函数沿 νx 方向的切片 line_profile_Two = abs(fftshift(fft(H2(size(H2, 1)/2, :)))); subplot(2, 1, 2) plot(line_profile_Two) title(\u0026#39;Transfer Function H2(νx) along a Line\u0026#39;) xlabel(\u0026#39;Frequency (νx)\u0026#39;) ylabel(\u0026#39;Magnitude\u0026#39;) 2.3 Implementation Matlab 代码将在二维情况下实现反卷积，使用带有二次惩罚项的最小二乘法。该准则将使用第一节中提出的循环近似进行最小化，并在第4页进行了总结。\n关于正则化项，它依赖于图像列和行上相邻像素之间的差异。它的表达式为：\n$$ | D x |^2 = \\sum_{n,m} (x_{n,m} - x_{n,m+1})^2 + (x_{n,m} - x_{n+1,m})^2 $$\n并且它将基于两个滤波器来实现：\n$$ \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; -1 \u0026amp; 1 \\ 0 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix} \\quad \\text{和} \\quad \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; -1 \u0026amp; 0 \\ 0 \u0026amp; 1 \u0026amp; 0 \\end{bmatrix} $$\n这些滤波器计算列和行上像素之间的差异。也可以使用带有以下脉冲响应的唯一滤波器：\n$$ \\begin{bmatrix} 0 \u0026amp; -1 \u0026amp; 0 \\ -1 \u0026amp; 4 \u0026amp; -1 \\ 0 \u0026amp; -1 \u0026amp; 0 \\end{bmatrix} \\quad 或 \\quad \\begin{bmatrix} -1 \u0026amp; -1 \u0026amp; -1 \\ -1 \u0026amp; 8 \u0026amp; -1 \\ -1 \u0026amp; -1 \u0026amp; -1 \\end{bmatrix} \\quad 或 \\quad \\begin{bmatrix} 1 \u0026amp; -2 \u0026amp; 1 \\ -2 \u0026amp; 4 \u0026amp; -2 \\ 1 \u0026amp; -2 \u0026amp; 1 \\end{bmatrix} $$ 它们实现了各种图像梯度的近似。\n在一个函数中实现反卷积，该函数以观测到的图像、脉冲响应和正则化参数作为输入。\n[!IMPORTANT]\n正则化项 $| D x |^2$ 代表了水平方向和垂直方向相邻像素值的平方差之和。 $$ D_{horiz} = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; -1 \u0026amp; 1 \\ 0 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix}\\ \\ \\ \\ \\ \\ \\ \\ D_{vert} = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; -1 \u0026amp; 0 \\ 0 \u0026amp; 1 \u0026amp; 0 \\end{bmatrix}\\ \\ $$ 前面我们得到： $$ \\hat{x} = (H^{T}H + \\mu D^{T}D)^{-1}H^{T}y $$ 现在进行傅里叶变换下的去卷积（在频域处理） $$ \\hat{x}(\\nu_{x}, \\nu_{y}) = \\frac{\\hat{H}^{*}(\\nu_{x}, \\nu_{y}) \\hat{y}(\\nu_{x}, \\nu_{y})}{|\\hat{H}(\\nu_{x}, \\nu_{y})|^2 + \\mu |\\hat{D}(\\nu_{x}, \\nu_{y})|^2} $$\n$\\hat{H}(\\nu_{x}, \\nu_{y})$ 是卷积矩阵的傅里叶变换\n$\\hat{D}(\\nu_{x}, \\nu_{y})$ 是差分矩阵的傅里叶变换\n$\\hat{x}(\\nu_{x}, \\nu_{y})$ 是频域中的恢复图像\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 function x_est = deconvolve_2D(y, h, mu) % y: 输入模糊图像 % h: 脉冲响应（卷积核） % mu: 正则化参数 % 计算卷积核的傅里叶变换 H = MyFFT2RI(h, length(y)); % 构造正则化滤波器 % 构造D矩阵，使用卷积实现邻近像素差分 D_horiz = [0 0 0; 0 -1 1; 0 0 0]; % 水平方向滤波器 D_vert = [0 0 0; 0 -1 0; 0 1 0]; % 垂直方向滤波器 % 计算D矩阵的傅里叶变换 D_horiz_fft = MyFFT2RI(D_horiz, length(y)); %这里length(y)正确与否不确定 D_vert_fft = MyFFT2RI(D_vert, length(y)); % 计算观测图像的傅里叶变换 Y = MyFFT2(y); % 构建正则化项的频率表达式 Reg_term = abs(D_horiz_fft).^2 + abs(D_vert_fft).^2; % 构建Wiener滤波器，带正则化项 H_conj = conj(H); X = (H_conj .* Y) ./ (abs(H).^2 + mu * Reg_term); % 反傅里叶变换返回空间域 x_est = real(MyIFFT2(F)); end 首先考虑简单的逆滤波器情况，即 $µ = 0$ 。分析并评论对每个数据集得到的结果。\n[!IMPORTANT]\n前面我们得到：\t$\\hat{x} = (H^{T}H + \\mu D^{T}D)^{-1}H^{T}y$\n现在变成：\t$\\hat{x} = (H^{T}H)^{-1}H^{T}y$ $$ \\hat{x}(\\nu_{x}, \\nu_{y}) = \\frac{\\hat{H}^{*}(\\nu_{x}, \\nu_{y}) \\hat{y}(\\nu_{x}, \\nu_{y})}{|\\hat{H}(\\nu_{x}, \\nu_{y})|^2 } $$\n$\\hat{H}(\\nu_{x}, \\nu_{y})$ 是卷积矩阵的傅里叶变换\n$\\hat{D}(\\nu_{x}, \\nu_{y})$ 是差分矩阵的傅里叶变换\n$\\hat{x}(\\nu_{x}, \\nu_{y})$ 是频域中的恢复图像\n当 µ = 0 时，去卷积过程依赖于直接反演卷积核的傅里叶系数。然而，这对噪声非常敏感，特别是当卷积核的某些频率接近零时，直接反演会导致噪声被放大。\n分析对不同 µ 值（在 log_10 刻度上取值）的结果。评论在空间域和频域中获得的结果。不同的 µ 值如何影响每个数据集的反卷积图像？通过试验和误差及视觉检查结果，确定合适的 µ值。\n[!IMPORTANT]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mu_values = logspace(-10, 10, 100); % 生成从 10^-10 到 10^10 的 \\mu 值 errors = zeros(size(mu_values)); % 用于存储每个 \\mu 对应的误差 for i = 1:length(mu_values) mu = mu_values(i); x_est = deconvolve_2D(y, h, mu); % 进行去卷积 % 计算去卷积结果与真实图像的误差 errors(i) = norm(x_est - true_image, \u0026#39;fro\u0026#39;); % 使用 Frobenius 范数计算误差 end % 绘制 \\mu 与误差之间的关系 figure; loglog(mu_values, errors); xlabel(\u0026#39;\\mu (log scale)\u0026#39;); ylabel(\u0026#39;Error\u0026#39;); title(\u0026#39;Regularization Parameter \\mu vs. Reconstruction Error\u0026#39;); 2.4 超参数的作用\n上一点使我们能够评估与反卷积问题相关的内在难度。它还表明，考虑可用的关于重建图像期望正则性的先验信息可以获得更好的结果。这种方法因此使我们能够在两种信息源之间进行折衷：观测数据和可用的 a priori 信息（关于正则性）。这是通过参数 µ 的值来实现的。在本研究中，µ 的值是通过经验选择的，以使反卷积图像既不过于平滑也不过于不规则。\n在这里研究的“玩具示例”中，真实图像已知，即从中生成观测数据的图像已知。\n因此，可以计算反卷积图像 $\\hat{x}$ 和真实图像 $x^*$ 之间的数值差异，作为正则化参数 $\\mu$ 的函数。\n为此，考虑以下三种距离函数： $$ \\Delta_2(\\mu) = \\frac{\\sum_{p,q}(\\hat{x}{p,q}(\\mu) - x^{\\star}{p,q})^2}{\\sum_{p,q}(x^{\\star}{p,q})^2} = \\frac{|\\hat{x}(\\mu) - x^{\\star}|2^2}{|x^{\\star}|2^2} \\ \\Delta_1(\\mu) = \\frac{\\sum{p,q} |\\hat{x}{p,q}(\\mu) - x^{\\star}{p,q}|}{\\sum_{p,q} |x^{\\star}{p,q}|} = \\frac{|\\hat{x}(\\mu) - x^{\\star}|1}{|x^{\\star}|1} \\ \\Delta\\infty(\\mu) = \\frac{\\max{p,q} |\\hat{x}{p,q}(\\mu) - x^{\\star}{p,q}|}{\\max{p,q} |x^{\\star}{p,q}|} = \\frac{|\\hat{x}(\\mu) - x^{\\star}|\\infty}{|x^{\\star}|_\\infty} $$\n当恢复的图像类似于真实图像时，这些距离接近于0，当恢复的图像为零时，它们接近1。\n计算一组 $\\mu$ 值的距离，例如在 $10^{-10}$ 和 $10^{10}$ 之间的对数间隔值。给出最小化每个距离函数的 $\\mu$ 值，并将结果与先前选择的经验值进行比较（应主要关注第二个数据集 Data2）。\n[!IMPORTANT]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 function [best_mu, delta2_values, delta1_values, delta_inf_values] = find_best_mu(y, h, true_image) % y: 输入模糊图像 % h: 脉冲响应（卷积核） % true_image: 已知的真实图像 % 返回最优的 mu 值，以及每个 mu 对应的距离度量结果 % 计算真实图像的不同范数 true_image_norm2 = norm(true_image(:), 2)^2; % 二范数的平方 true_image_norm1 = norm(true_image(:), 1); % 一范数 true_image_norm_inf = norm(true_image(:), Inf); % 无穷范数 H = MyFFT2RI(h, length(y)); % 计算卷积核的傅里叶变换 % H = fft2(h, size(y, 1), size(y, 2)); %如果上面报错 用下面的尺度 Y = MyFFT2(y); % 计算观测图像的傅里叶变换 % 构造正则化滤波器 % 构造D矩阵，使用卷积实现邻近像素差分 D_horiz = [0 0 0; 0 -1 1; 0 0 0]; % 水平方向滤波器 D_vert = [0 0 0; 0 -1 0; 0 1 0]; % 垂直方向滤波器 % 计算D矩阵的傅里叶变换 D_horiz_fft = MyFFT2RI(D_horiz, length(y)); %这里length(y)正确与否不确定 D_vert_fft = MyFFT2RI(D_vert, length(y)); % 构建正则化项的频率表达式 Reg_term = abs(D_horiz_fft).^2 + abs(D_vert_fft).^2; % 正则化参数的范围，取对数间隔 mu_values = logspace(-10, 10, 100); % 存储每个 mu 对应的距离度量值 delta2_values = zeros(length(mu_values), 1); delta1_values = zeros(length(mu_values), 1); delta_inf_values = zeros(length(mu_values), 1); % 逐个计算不同 mu 下的去卷积结果 for i = 1:length(mu_values) mu = mu_values(i); % 构建 Wiener 滤波器 H_conj = conj(H); % 卷积核的复共轭 F = H_conj ./ (abs(H).^2 + mu * Reg_term); % 滤波器 % 使用 Wiener 滤波器对傅里叶域中的观测图像进行滤波 X_est = F .* Y; % 反傅里叶变换返回空间域 x_est = real(MyIFFT2(F)); % 计算三种距离度量 delta2_values(i) = norm(x_est(:) - true_image(:), 2)^2 / true_image_norm2; delta1_values(i) = norm(x_est(:) - true_image(:), 1) / true_image_norm1; delta_inf_values(i) = norm(x_est(:) - true_image(:), Inf) / true_image_norm_inf; end %% 找到使二范数误差最小的 mu [~, min_idx] = min(delta2_values); best_mu = mu_values(min_idx); % 可视化距离度量随 mu 的变化 figure; loglog(mu_values, delta2_values, \u0026#39;r-\u0026#39;, \u0026#39;LineWidth\u0026#39;, 2); hold on; loglog(mu_values, delta1_values, \u0026#39;b-\u0026#39;, \u0026#39;LineWidth\u0026#39;, 2); loglog(mu_values, delta_inf_values, \u0026#39;g-\u0026#39;, \u0026#39;LineWidth\u0026#39;, 2); xlabel(\u0026#39;\\mu\u0026#39;); ylabel(\u0026#39;Distance Metrics\u0026#39;); legend(\u0026#39;\\Delta_2(\\mu)\u0026#39;, \u0026#39;\\Delta_1(\\mu)\u0026#39;, \u0026#39;\\Delta_\\infty(\\mu)\u0026#39;); title(\u0026#39;Distance Metrics vs. \\mu\u0026#39;); grid on; end ","permalink":"https://zehua716.github.io/zh/posts/2023-11-05-%E7%A4%BA%E4%BE%8B%E6%96%87%E7%AB%A0/","summary":"\u003ch1 id=\"图像恢复---------tp1\"\u003e\u003cstrong\u003e图像恢复   \u0026mdash;   TP1\u003c/strong\u003e\u003c/h1\u003e\n\u003ch3 id=\"图像反卷积wiener-hunt-方法\"\u003e\u003cstrong\u003e图像反卷积：Wiener-Hunt 方法\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e主要针对图像去模糊问题，即从模糊(带噪)图像中恢复清晰图像。这属于逆问题的范畴，一半出现在处理真实测量系统时。由于每个测量系统（如温度计、CCD相机、光谱仪等）都受到基础物理学的限制，比如有限精度、有限动态范围、非零响应时间等。这意味着测得的量或多或少都有扭曲。因此这部分是对感兴趣物理量的某种扭曲程度的度量。\u003c/p\u003e\n\u003cp\u003e大多数情况下，测量系统直接给出的测量数据通常具有足够的精度和鲁棒性。但是，也存在测量结果不准确的情况。为了解决精度问题，或者说至少部分地优化它，已经开发了特殊的信号和图像处理技术。在接下来的内容中，我们将通过一个简单的例子来展示此类方法。\u003c/p\u003e\n\u003cp\u003e我们有一张未聚焦的图像。这种情况下，点的图像实际上会是一个斑点。捕获的图像将会因为模糊而受损，因为它是由真实图像中每个点生成的斑点的叠加结果。\u003c/p\u003e\n\u003cp\u003e描述这种转换的最简单模型是线性不变滤波器，即卷积。示意图如下图所示。\u003c/p\u003e\n\u003cp\u003e![image-20240909002355073](/Users/zehua/Library/Application Support/typora-user-images/image-20240909002355073.png)\u003c/p\u003e\n\u003cp\u003e在上面的示意图中，$x_{n,m}$ 代表真实或原始图像，$y_{n,m}$ 代表观测到的图像，或者更确切地说，是我们通过相机拍到的未聚焦图像。添加分量 $b_{n,m}$ 是为了考虑测量和建模误差。\u003c/p\u003e\n\u003cp\u003e描述测量过程的方程(二维)如下：\n$$\ny_{n,m} = \\sum_{p=-P}^{P} \\sum_{q=-Q}^{Q} h_{p,q} x_{n-p,m-q} + b_{n,m}\n$$\n$y_{n,m}$ 是对于每个观测到的像素 $(n, m)$。在这个公式中，$P$ 和 $Q$ 是给定的整数。\u003c/p\u003e\n\u003cp\u003e注意，滤波器通常来说都是低通滤波器，这就意味着它们无法准确地在输出中再现输入信号或图像中的所有分量，因为高频分量要么被强烈衰减，要么完全被拒绝，这也就是为什么 \u0026lsquo;\u0026lsquo;恢复真实信号\u0026rsquo;\u0026lsquo;或者说\u0026rsquo;\u0026lsquo;图像的逆问题\u0026rsquo;\u0026rsquo; 是如此困难：必须恢复那些要么完全不存在、要么“错误”观测到的高频分量。\u003c/p\u003e\n\u003cp\u003e在下面的例子中，我们用线性方法来解决图像反卷积问题。这些线性方法依赖于最小二乘准则，并结合了二次惩罚。我们先介绍其理论部分，包括这些准则及其最小化器。此外，展示背后的技术细节，并提出了一种基于循环近似的方法，以实现快速的数值计算。\u003c/p\u003e\n\u003ch3 id=\"1-一维反卷积\"\u003e1. 一维反卷积\u003c/h3\u003e\n\u003cp\u003e为了简化理论概念，我们先讨论在一维情况下的信号反卷积。这种简化情况允许对反卷积问题的分析更加深入，同时更容易掌握概念和思路。随后再引入二维情况，并将其视为一维情况的扩展。Matlab 实现部分仅涉及二维情况。\u003c/p\u003e\n\u003ch4 id=\"11-一维建模\"\u003e1.1 一维建模\u003c/h4\u003e\n\u003cp\u003e在一维情况下，(1) 中给出的观测模型变为：\u003c/p\u003e\n\u003cp\u003e$$\ny_n = \\sum_{p=-P}^{P} h_p x_{n-p} + b_n\n$$\u003c/p\u003e\n\u003cp\u003e如果我们有 $N$ 个样本，可以将相应的 $N$ 个方程写成矩阵形式：\n$$\n\\mathbf{y} = \\mathbf{H} \\mathbf{x} + \\mathbf{b}\n$$\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e向量 $\\mathbf{y}$ 包含了所有的 $N$ 个观测值（在二维情况下，它将包含模糊的图像）。\u003c/p\u003e","title":"示例文章"},{"content":"图像恢复 \u0026mdash; TP1 图像反卷积：Wiener-Hunt 方法 主要针对图像去模糊问题，即从模糊(带噪)图像中恢复清晰图像。这属于逆问题的范畴，一半出现在处理真实测量系统时。由于每个测量系统（如温度计、CCD相机、光谱仪等）都受到基础物理学的限制，比如有限精度、有限动态范围、非零响应时间等。这意味着测得的量或多或少都有扭曲。因此这部分是对感兴趣物理量的某种扭曲程度的度量。\n大多数情况下，测量系统直接给出的测量数据通常具有足够的精度和鲁棒性。但是，也存在测量结果不准确的情况。为了解决精度问题，或者说至少部分地优化它，已经开发了特殊的信号和图像处理技术。在接下来的内容中，我们将通过一个简单的例子来展示此类方法。\n我们有一张未聚焦的图像。这种情况下，点的图像实际上会是一个斑点。捕获的图像将会因为模糊而受损，因为它是由真实图像中每个点生成的斑点的叠加结果。\n描述这种转换的最简单模型是线性不变滤波器，即卷积。示意图如下图所示。\n![image-20240909002355073](/Users/zehua/Library/Application Support/typora-user-images/image-20240909002355073.png)\n在上面的示意图中，$x_{n,m}$ 代表真实或原始图像，$y_{n,m}$ 代表观测到的图像，或者更确切地说，是我们通过相机拍到的未聚焦图像。添加分量 $b_{n,m}$ 是为了考虑测量和建模误差。\n描述测量过程的方程(二维)如下： $$ y_{n,m} = \\sum_{p=-P}^{P} \\sum_{q=-Q}^{Q} h_{p,q} x_{n-p,m-q} + b_{n,m} $$ $y_{n,m}$ 是对于每个观测到的像素 $(n, m)$。在这个公式中，$P$ 和 $Q$ 是给定的整数。\n注意，滤波器通常来说都是低通滤波器，这就意味着它们无法准确地在输出中再现输入信号或图像中的所有分量，因为高频分量要么被强烈衰减，要么完全被拒绝，这也就是为什么 \u0026lsquo;\u0026lsquo;恢复真实信号\u0026rsquo;\u0026lsquo;或者说\u0026rsquo;\u0026lsquo;图像的逆问题\u0026rsquo;\u0026rsquo; 是如此困难：必须恢复那些要么完全不存在、要么“错误”观测到的高频分量。\n在下面的例子中，我们用线性方法来解决图像反卷积问题。这些线性方法依赖于最小二乘准则，并结合了二次惩罚。我们先介绍其理论部分，包括这些准则及其最小化器。此外，展示背后的技术细节，并提出了一种基于循环近似的方法，以实现快速的数值计算。\n1. 一维反卷积 为了简化理论概念，我们先讨论在一维情况下的信号反卷积。这种简化情况允许对反卷积问题的分析更加深入，同时更容易掌握概念和思路。随后再引入二维情况，并将其视为一维情况的扩展。Matlab 实现部分仅涉及二维情况。\n1.1 一维建模 在一维情况下，(1) 中给出的观测模型变为：\n$$ y_n = \\sum_{p=-P}^{P} h_p x_{n-p} + b_n $$\n如果我们有 $N$ 个样本，可以将相应的 $N$ 个方程写成矩阵形式： $$ \\mathbf{y} = \\mathbf{H} \\mathbf{x} + \\mathbf{b} $$\n向量 $\\mathbf{y}$ 包含了所有的 $N$ 个观测值（在二维情况下，它将包含模糊的图像）。\n向量 $\\mathbf{x}$ 包含了恢复信号或图像的样本，而 $\\mathbf{b}$ 是噪声样本。\n矩阵 $\\mathbf{H}$，称为模糊矩阵，具有以下经典结构：\n$$ H = \\begin{bmatrix} h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\\\ 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\\\ 0 \u0026amp; 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; \\cdots \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; \\cdots \\\\ \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \\end{bmatrix} $$\n​\t$$H = \\begin{bmatrix}h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\ 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\ 0 \u0026amp; 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; 0 \u0026amp; \\cdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; h_P \u0026amp; \\cdots \u0026amp; h_0 \u0026amp; \\cdots \u0026amp; h_{-P} \u0026amp; \\cdots \\ \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \\end{bmatrix}$$\n$\\mathbf{H}$ 是一个 $N \\times N$ 的方阵，并且具有 Toeplitz 结构。 因此，信号反卷积问题可以重新表述为: 在已知观测信号 $\\mathbf{y}$ 并知道卷积矩阵 $H$ 的情况下，估计向量 $\\mathbf{x}$\n1.2 带惩罚的最小二乘法 提出的重建策略 (损失函数) 是一种带惩罚的最小二乘法。它包含两个部分：\n一个重构损失项，用于量化恢复信号 $\\mathbf{x}$ 与观测信号 $\\mathbf{y}$ 进行重新卷积后的相似性，从而确保恢复的信号与观测信号一致。 一个惩罚项，用于限制恢复信号的连续样本之间的差异，确保其具有一定的规则性结构。 该准则采用以下表达式：\n$$ J_{\\text{PLS}}(x) = | y - Hx |^2 + \\mu | Dx |^2 = (y - Hx)^t (y - Hx) + \\mu x^t D^t D x $$\n其中，$D$ 是阶数为 1，大小为 $(N - 1) \\times N$ 的差分矩阵，定义如下：\n$$ D = \\begin{bmatrix} \\cdots \u0026amp; -1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\cdots \\ \\cdots \u0026amp; 0 \u0026amp; -1 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\cdots \\ \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; \\cdots \\ \\cdots \u0026amp; 0 \u0026amp; 0 \u0026amp; -1 \u0026amp; 1 \u0026amp; \\cdots \\end{bmatrix} $$\n带惩罚的最小二乘准则的最小化器为： $$ \\hat{x} = (H^t H + \\mu D^t D)^{-1} H^t y $$\n[!IMPORTANT]\n证明: $$ \\hat{x} = (H^T H + \\mu D^T D)^{-1} H^T y $$ 我们已知损失准则为: $$ J_{PLS}(x) = (y - Hx)^T(y - Hx) + \\mu x^T D^T Dx $$\n$$ J_{PLS}(x) = y^T y - 2x^T H^T y + x^T H^T H x + \\mu x^T D^T D x $$\n求偏导为0: $$ \\frac{\\partial J_{PLS}(x)}{\\partial x} = -2H^T y + 2H^T H x + 2\\mu D^T D x = 0 $$\n$$ (H^T H + \\mu D^T D) x = H^T y $$\n$$ \\hat{x} = (H^T H + \\mu D^T D)^{-1} H^T y $$\n[!NOTE]\n特殊情况：\n在特定情况下 $\\mu = 0$ 时准则和最小化器的结果表达式变为 $ J_{PLS}(x) = |y - Hx|^2$\n最小化器方程为： $$ H^T H x = H^T y $$\n$$ \\hat{x} = (H^T H)^{-1} H^T y $$\n此时准则变为经典的最小二乘问题，没有正则化项，也就是说，模型仅考虑最小化观测值与预测值之间的误差，而不会惩罚解的复杂度或平滑性。其解是经典的 最小二乘解。\n1.2.1 循环近似 回到公式 (9) ，我们已知矩阵 $H^T H + \\mu D^T D$ 的大小为 $N \\times N$，当 $N$ 很大时，这种反演在计算上非常昂贵甚至不可行。\n比如说在处理图像时，比如对于 $1000 \\times 1000$ 的图像，矩阵的大小为 $10^6 \\times 10^6$ ，计算不了。在三维情况下，更复杂。\n因此为了计算 $\\hat{x}$，有几种方法可以克服这种大计算量的困难。\n下面我们考虑使用循环矩阵的特性，因为我们可以用对角矩阵来 “替换” 公式 (9) 中的矩阵 (通过快速傅里叶变换 FFT 可以将循环矩阵 “转化”为对角矩阵)。因此，使用对角矩阵进行计算时，乘法或反演等矩阵运算的复杂度将大大降低。\n但是，这需要先将矩阵 $H$ 和 $D$ 近似为循环矩阵 $\\tilde{H}$ 和 $\\tilde{D}$。\n循环近似涉及修改矩阵的右上角和/或左下角部分，使其具有循环结构。这种近似的核心假设是信号或图像在开始和结束部分是周期性的，即信号的末尾与开头相连接，形成一个环状结构。\n循环卷积矩阵 $\\tilde{H}$ 和 $\\tilde{D}$ 在傅里叶基下可以轻松对角化： $$ \\tilde{H} = F^T \\Lambda_h F \\quad \\text{和} \\quad \\tilde{D} = F^T \\Lambda_d F $$ 矩阵 $\\Lambda_h$ 是对角矩阵，其对角线上元素是 $H$ 的特征值。\n特征值可以通过对矩阵 $H$ 第一行进行快速傅里叶变换（FFT）获得，即计算脉冲响应的 N 点 FFT，这些响应代表频率响应的样本。\n同样适用于矩阵 $\\tilde{D}$ 及其特征值，其中将脉冲响应替换为 $[-1, 1]$。\n通过在 (9) 中用 (18) 代替，并使用简单的矩阵操作，可以得到： $$ \\overset{\\circ}{\\hat{x}} = (\\Lambda_{h}^{\\dagger} \\Lambda_{h} + \\mu \\Lambda_{d}^{\\dagger} \\Lambda_{d})^{-1} \\Lambda_{h}^{\\dagger} \\overset{\\circ}{y} $$\n证明：\n补充知识: $\\tilde{H}$ 是一个实矩阵，因此其复共轭等于它本身，$\\tilde{H} = \\tilde{H}^T$ 。 $\\tilde{D}$ 同理\n在近似为循环矩阵后，公式 (15) 变为: $$ \\hat{x} = (\\tilde{H}^{T}\\tilde{H} + \\mu \\tilde{D}^{T}\\tilde{D})^{-1}\\tilde{H}^{T}y $$ 其中: $\\tilde{H} = F^T \\Lambda_h F$ 且 $ \\tilde{D} = F^T \\Lambda_d F$ 将其带入上述公式，得: $$ \\hat{x} = ((F^{T}\\Lambda_{h}F)^{T}(F^{T}\\Lambda_{h}F) + \\mu (F^{T}\\Lambda_{d}F)^{T}(F^{T}\\Lambda_{d}F))^{-1}(F^{T}\\Lambda_{h}F)^{T}y $$ 因为傅里叶矩阵 $F$ 是一个正交矩阵，具有 $F F^{T} = I$ 的性质，即 $F^{T} = F^{-1}$\n并且我们有 $(F^{T}\\Lambda_{h}F)^{T} = F^{T}\\Lambda_{h}^{T}F$ 以及 $(F^{T}\\Lambda_{d}F)^{T} = F^{T}\\Lambda_{d}^{T}F$\n所以: $$ \\hat{x} = (F^{T}\\Lambda_{h}^{T}\\Lambda_{h}F + \\mu F^{T}\\Lambda_{d}^{T}\\Lambda_{d}F)^{-1} F^{T}\\Lambda_{h}^{T}F y $$\n$$ \\hat{x} = F^{T}(\\Lambda_{h}^{T}\\Lambda_{h} + \\mu \\Lambda_{d}^{T}\\Lambda_{d})^{-1} \\Lambda_{h}^{T}F y $$\n$$ 令\\ \\ \\ \\overset{\\circ}{\\hat{x}} = F \\hat{x}, \\quad \\overset{\\circ}{y} = F y $$\n那么: $$ \\overset{\\circ}{\\hat{x}} = (\\Lambda_{h}^{\\dagger} \\Lambda_{h} + \\mu \\Lambda_{d}^{\\dagger} \\Lambda_{d})^{-1} \\Lambda_{h}^{\\dagger} \\overset{\\circ}{y} $$ 证毕。\n[!NOTE]\n特殊情况：\n当 $\\mu = 0$ 时，正则化项消失，公式简化为： $$ \\overset{\\circ}{\\hat{x}} = (\\Lambda_{h}^{\\dagger} \\Lambda_{h})^{-1} \\Lambda_{h}^{\\dagger} \\overset{\\circ}{y} $$ 这意味着我们仅仅执行了经典的 Wiener 去卷积，没有考虑图像的正则化。 $$ \\hat{x} = (\\tilde{H}^{T}\\tilde{H} )^{-1}\\tilde{H}^{T}y\\ $$\n没有正则化时，虽然理论上可以恢复原始信号，但是实际上收到的噪声影响很大，且没有约束来将其消除\n为了完成我们的讨论，我们首先构建向量 $g_{\\text{PLS}}$，其分量定义如下： $$ g_{PLS}^{n} = \\frac{\\overset{\\circ}{h}{n}^{*}}{|\\overset{\\circ}{h}{n}|^2 + \\mu |\\overset{\\circ}{d}{n}|^2} \\quad \\text{for } n = 1, 2, \\dots, N $$ 因此，向量 $\\overset{\\circ}{\\hat{x}}$ 是通过向量 $g{\\text{PLS}}$ 和 $\\overset{\\circ}{\\hat{y}}$ 之间逐元素相乘得到的： $$ \\overset{\\circ}{\\hat{x}} = g_{\\text{PLS}} .* \\overset{\\circ}{\\hat{y}} $$ 反卷积问题可以表述为在傅里叶域中进行的滤波操作，其中 $g_{\\text{PLS}}$ 代表离散传递函数。\n反卷积问题总结如下：\n① 构建 $\\mathring{h}$ 作为脉冲响应的 $N$ 点 FFT\n② 构建 $\\mathring{d}$ 作为 $[1; -1]$ 的 $N$ 点 FFT\n③ 构建包含传递函数 $g_{\\text{PLS}}$ 的向量\n④ 构建观测值的 FFT $\\mathring{y}$\n⑤ 计算 $\\mathring{\\hat{x}}$，作为传递函数 $g_{\\text{PLS}}$ 和 $\\mathring{\\hat{y}}$ 的乘积\n⑥ 计算 $\\mathring{\\hat{x}}$ 的 IFFT 以在空间域中获得解 $\\hat{x}$\n2 实现 2.1 二维方法 对于二维情况，可以给出类似于一维情况的方程。然而，所涉及的矩阵结构更加复杂: block-Tœplitz 矩阵，每个块本身也具有 Tœplitz 结构。这使得在两个方向上进行循环近似变得更加困难。因此，二维情况仅作为一维情况的扩展来展示，重点是 Matlab 实现。\n注意以下几点：\n图像、脉冲响应、正则化项都是二维的，这意味着必须使用 FFT-2D 而不是 FFT。 更确切地说，如果要恢复的图像有 N 行和 N 列，那么 FFT-2D 必须在 N 行和 N 列上计算。 频率传递函数也是二维的，每个空间频率有一个维度。 特别说明 — 在任何情况下，矩阵 H 和 D 都不应在 Matlab 代码中构建。\n2.2 观测图像 第一步是加载文件 Data1 和 Data2 中提供的数据。这可以通过使用 load 函数完成。每个文件包含：模糊图像 (Data)、用于比较的真实图像 (TrueIma)，以及卷积滤波器的脉冲响应 (IR)。现在分析每个数据集及其相互关系。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 close all, clear all clc %% 第1部分：加载图像数据 % 加载第一组数据，包括模糊图像和真实图像 DataOne = load(\u0026#39;DataOne.mat\u0026#39;); image_One = DataOne.Data; True_image_One = DataOne.TrueImage; % 加载第二组数据，包括模糊图像和真实图像 DataTwo = load(\u0026#39;DataTwo.mat\u0026#39;); image_Two = DataTwo.Data; True_image_Two = DataTwo.TrueImage; %% 第2部分：显示两幅图像 % 创建一个图形窗口以显示两幅图像 figure(1), clf % 显示第一幅图像 subplot(1, 2, 1) imagesc(image_One) colormap(\u0026#39;gray\u0026#39;) colorbar axis square off title(\u0026#39;Image One\u0026#39;) % 显示第二幅图像 subplot(1, 2, 2) imagesc(image_Two) colormap(\u0026#39;gray\u0026#39;) colorbar axis square off title(\u0026#39;Image Two\u0026#39;) 对每个观察到的图像的模糊程度进行评论。 在频域中分析图像（同时使用线性和对数刻度）并提供适当的评论。花时间识别两个频率轴，必须正确标注零频率、低频、高频等。在你的报告中适当地展示这些结果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 %% 第3部分：图像的频域分析 % 计算第一幅图像的二维傅里叶变换，并将零频移到中心 fft_image_One = MyFFT2(image_One); fft_image_One_shifted = fftshift(fft_image_One); % 计算第一幅图像频谱的幅值 magnitude_spectrum_One = abs(fft_image_One_shifted); % 计算第二幅图像的二维傅里叶变换，并将零频移到中心 fft_image_Two = MyFFT2(image_Two); fft_image_Two_shifted = fftshift(fft_image_Two); % 计算第二幅图像频谱的幅值 magnitude_spectrum_Two = abs(fft_image_Two_shifted); % 生成频率轴，用于第一幅图像 rows_One = size(image_One, 1); % 获取行数 cols_One = size(image_One, 2); % 获取列数 freq_axis_One = -0.5 : 1/cols_One : 0.5 - 1/cols_One; % 创建频率轴 freq_axis_One = fftshift(freq_axis_One); % 将频率轴中心化 % 生成频率轴，用于第二幅图像 rows_Two = size(image_Two, 1); cols_Two = size(image_Two, 2); freq_axis_Two = -0.5 : 1/cols_Two : 0.5 - 1/cols_Two; freq_axis_Two = fftshift(freq_axis_Two); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 %% 第4部分：显示频谱分析结果 % 在线性尺度下显示第一幅图像的频谱 figure(3), clf subplot(2, 2, 1) imagesc(freq_axis_One, freq_axis_One, magnitude_spectrum_One) colormap(\u0026#39;jet\u0026#39;) axis square title(\u0026#39;Image One - Échelle Linéaire\u0026#39;) xlabel(\u0026#39;Fréquence horizontale (axe de fréquence)\u0026#39;) ylabel(\u0026#39;Fréquence verticale (axe de fréquence)\u0026#39;) % 在线性尺度下显示第二幅图像的频谱 subplot(2, 2, 2) imagesc(freq_axis_Two, freq_axis_Two, magnitude_spectrum_Two) colormap(\u0026#39;jet\u0026#39;) axis square title(\u0026#39;Image Two - Échelle Linéaire\u0026#39;) xlabel(\u0026#39;Fréquence horizontale (axe de fréquence)\u0026#39;) ylabel(\u0026#39;Fréquence verticale (axe de fréquence)\u0026#39;) % 在对数尺度下显示第一幅图像的频谱 subplot(2, 2, 3) imagesc(freq_axis_One, freq_axis_One, log(1 + magnitude_spectrum_One)) colormap(\u0026#39;jet\u0026#39;) axis square title(\u0026#39;Image One - Échelle Logarithmique\u0026#39;) xlabel(\u0026#39;Fréquence horizontale (axe de fréquence)\u0026#39;) ylabel(\u0026#39;Fréquence verticale (axe de fréquence)\u0026#39;) % 在对数尺度下显示第二幅图像的频谱 subplot(2, 2, 4) imagesc(freq_axis_Two, freq_axis_Two, log(1 + magnitude_spectrum_Two)) colormap(\u0026#39;jet\u0026#39;) axis square title(\u0026#39;Image Two - Échelle Logarithmique\u0026#39;) xlabel(\u0026#39;Fréquence horizontale (axe de fréquence)\u0026#39;) ylabel(\u0026#39;Fréquence verticale (axe de fréquence)\u0026#39;) ​\t•\t零频率 位于图像的中心，对应图像中的平均亮度。零频率处的值越高，意味着图像的整体亮度较高。\n​\t•\t低频成分 主要反映图像中的大尺度结构或平滑区域。低频越强，图像的模糊程度越高。\n​\t•\t高频成分 对应图像的细节和边缘。模糊的图像高频成分较少，这表明细节被模糊化了。\n显示两个脉冲响应 $h_{n,m}$ 及其关联的传递函数 $H(\\nu_x, \\nu_y)$ 。\n首先使用 imagesc 函数，然后使用 plot 函数。正确地在每个轴上标记它们。在你的报告中适当地展示这些结果。什么类型的滤波器是它们？高通还是低通？两个滤波器之间的差异是什么？\n低通滤波器 (Low-pass)：如果滤波器主要通过低频信号而衰减高频信号.在传递函数的频率响应中，低频区域的幅值较高，而高频区域的幅值较低。如果传递函数的中心区域（即低频部分）有较强的响应，而边缘（高频部分）较弱，则该滤波器是低通滤波器；反之，如果高频部分较强，则是高通滤波器。\n假设有两个不同的脉冲响应 h_1 和 h_2 ，可以分别计算它们的传递函数，并比较它们的频率响应\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 %% 第5部分：显示脉冲响应和传递函数 % 加载第一组数据的脉冲响应 h1 = DataOne.IR; % 加载第二组数据的脉冲响应 h2 = DataTwo.IR; % 计算第一幅图像的脉冲响应的傅里叶变换 H1 = abs(MyFFT2RI(h1,length(image_One))); % 计算第二幅图像的脉冲响应的傅里叶变换 H2 = abs(MyFFT2RI(h2,length(image_Two))); % 计算第一幅图像的传递函数 transfer_function_h1 = MyFFT2RI(h1, size(image_One, 1)); % 计算第二幅图像的传递函数 transfer_function_h2 = MyFFT2RI(h2, size(image_Two, 1)); % 显示第一幅图像的脉冲响应和传递函数 figure(4), clf subplot(2, 2, 1) imagesc(H1) axis square off title(\u0026#39;Réponse Impulsionnelle H1[n,m]\u0026#39;) colormap(\u0026#39;gray\u0026#39;) subplot(2, 2, 2) imagesc(fftshift(log(1 + abs(transfer_function_h1)))) axis square off title(\u0026#39;Fonction de Transfert H1(νx, νy)\u0026#39;) colormap(\u0026#39;jet\u0026#39;) % 显示第二幅图像的脉冲响应和传递函数 subplot(2, 2, 3) imagesc(H2) axis square off title(\u0026#39;Réponse Impulsionnelle H2[n,m]\u0026#39;) colormap(\u0026#39;gray\u0026#39;) subplot(2, 2, 4) imagesc(fftshift(log(1 + abs(transfer_function_h2)))) axis square off title(\u0026#39;Fonction de Transfert H2(νx, νy)\u0026#39;) colormap(\u0026#39;jet\u0026#39;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 %% 第6部分：使用 plot 显示传递函数沿某一线的切片 % 显示第一幅图像的传递函数沿 νx 方向的切片 figure(5), clf line_profile_One = abs(fftshift(fft(H1(size(H1, 1)/2, :)))); subplot(2, 1, 1) plot(line_profile_One) title(\u0026#39;Transfer Function H1(νx) along a Line\u0026#39;) xlabel(\u0026#39;Frequency (νx)\u0026#39;) ylabel(\u0026#39;Magnitude\u0026#39;) % 显示第二幅图像的传递函数沿 νx 方向的切片 line_profile_Two = abs(fftshift(fft(H2(size(H2, 1)/2, :)))); subplot(2, 1, 2) plot(line_profile_Two) title(\u0026#39;Transfer Function H2(νx) along a Line\u0026#39;) xlabel(\u0026#39;Frequency (νx)\u0026#39;) ylabel(\u0026#39;Magnitude\u0026#39;) 2.3 Implementation Matlab 代码将在二维情况下实现反卷积，使用带有二次惩罚项的最小二乘法。该准则将使用第一节中提出的循环近似进行最小化，并在第4页进行了总结。\n关于正则化项，它依赖于图像列和行上相邻像素之间的差异。它的表达式为：\n$$ | D x |^2 = \\sum_{n,m} (x_{n,m} - x_{n,m+1})^2 + (x_{n,m} - x_{n+1,m})^2 $$\n并且它将基于两个滤波器来实现：\n$$ \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; -1 \u0026amp; 1 \\ 0 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix} \\quad \\text{和} \\quad \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; -1 \u0026amp; 0 \\ 0 \u0026amp; 1 \u0026amp; 0 \\end{bmatrix} $$\n这些滤波器计算列和行上像素之间的差异。也可以使用带有以下脉冲响应的唯一滤波器：\n$$ \\begin{bmatrix} 0 \u0026amp; -1 \u0026amp; 0 \\ -1 \u0026amp; 4 \u0026amp; -1 \\ 0 \u0026amp; -1 \u0026amp; 0 \\end{bmatrix} \\quad 或 \\quad \\begin{bmatrix} -1 \u0026amp; -1 \u0026amp; -1 \\ -1 \u0026amp; 8 \u0026amp; -1 \\ -1 \u0026amp; -1 \u0026amp; -1 \\end{bmatrix} \\quad 或 \\quad \\begin{bmatrix} 1 \u0026amp; -2 \u0026amp; 1 \\ -2 \u0026amp; 4 \u0026amp; -2 \\ 1 \u0026amp; -2 \u0026amp; 1 \\end{bmatrix} $$ 它们实现了各种图像梯度的近似。\n在一个函数中实现反卷积，该函数以观测到的图像、脉冲响应和正则化参数作为输入。\n[!IMPORTANT]\n正则化项 $| D x |^2$ 代表了水平方向和垂直方向相邻像素值的平方差之和。 $$ D_{horiz} = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; -1 \u0026amp; 1 \\ 0 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix}\\ \\ \\ \\ \\ \\ \\ \\ D_{vert} = \\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; -1 \u0026amp; 0 \\ 0 \u0026amp; 1 \u0026amp; 0 \\end{bmatrix}\\ \\ $$ 前面我们得到： $$ \\hat{x} = (H^{T}H + \\mu D^{T}D)^{-1}H^{T}y $$ 现在进行傅里叶变换下的去卷积（在频域处理） $$ \\hat{x}(\\nu_{x}, \\nu_{y}) = \\frac{\\hat{H}^{*}(\\nu_{x}, \\nu_{y}) \\hat{y}(\\nu_{x}, \\nu_{y})}{|\\hat{H}(\\nu_{x}, \\nu_{y})|^2 + \\mu |\\hat{D}(\\nu_{x}, \\nu_{y})|^2} $$\n$\\hat{H}(\\nu_{x}, \\nu_{y})$ 是卷积矩阵的傅里叶变换\n$\\hat{D}(\\nu_{x}, \\nu_{y})$ 是差分矩阵的傅里叶变换\n$\\hat{x}(\\nu_{x}, \\nu_{y})$ 是频域中的恢复图像\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 function x_est = deconvolve_2D(y, h, mu) % y: 输入模糊图像 % h: 脉冲响应（卷积核） % mu: 正则化参数 % 计算卷积核的傅里叶变换 H = MyFFT2RI(h, length(y)); % 构造正则化滤波器 % 构造D矩阵，使用卷积实现邻近像素差分 D_horiz = [0 0 0; 0 -1 1; 0 0 0]; % 水平方向滤波器 D_vert = [0 0 0; 0 -1 0; 0 1 0]; % 垂直方向滤波器 % 计算D矩阵的傅里叶变换 D_horiz_fft = MyFFT2RI(D_horiz, length(y)); %这里length(y)正确与否不确定 D_vert_fft = MyFFT2RI(D_vert, length(y)); % 计算观测图像的傅里叶变换 Y = MyFFT2(y); % 构建正则化项的频率表达式 Reg_term = abs(D_horiz_fft).^2 + abs(D_vert_fft).^2; % 构建Wiener滤波器，带正则化项 H_conj = conj(H); X = (H_conj .* Y) ./ (abs(H).^2 + mu * Reg_term); % 反傅里叶变换返回空间域 x_est = real(MyIFFT2(F)); end 首先考虑简单的逆滤波器情况，即 $µ = 0$ 。分析并评论对每个数据集得到的结果。\n[!IMPORTANT]\n前面我们得到：\t$\\hat{x} = (H^{T}H + \\mu D^{T}D)^{-1}H^{T}y$\n现在变成：\t$\\hat{x} = (H^{T}H)^{-1}H^{T}y$ $$ \\hat{x}(\\nu_{x}, \\nu_{y}) = \\frac{\\hat{H}^{*}(\\nu_{x}, \\nu_{y}) \\hat{y}(\\nu_{x}, \\nu_{y})}{|\\hat{H}(\\nu_{x}, \\nu_{y})|^2 } $$\n$\\hat{H}(\\nu_{x}, \\nu_{y})$ 是卷积矩阵的傅里叶变换\n$\\hat{D}(\\nu_{x}, \\nu_{y})$ 是差分矩阵的傅里叶变换\n$\\hat{x}(\\nu_{x}, \\nu_{y})$ 是频域中的恢复图像\n当 µ = 0 时，去卷积过程依赖于直接反演卷积核的傅里叶系数。然而，这对噪声非常敏感，特别是当卷积核的某些频率接近零时，直接反演会导致噪声被放大。\n分析对不同 µ 值（在 log_10 刻度上取值）的结果。评论在空间域和频域中获得的结果。不同的 µ 值如何影响每个数据集的反卷积图像？通过试验和误差及视觉检查结果，确定合适的 µ值。\n[!IMPORTANT]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mu_values = logspace(-10, 10, 100); % 生成从 10^-10 到 10^10 的 \\mu 值 errors = zeros(size(mu_values)); % 用于存储每个 \\mu 对应的误差 for i = 1:length(mu_values) mu = mu_values(i); x_est = deconvolve_2D(y, h, mu); % 进行去卷积 % 计算去卷积结果与真实图像的误差 errors(i) = norm(x_est - true_image, \u0026#39;fro\u0026#39;); % 使用 Frobenius 范数计算误差 end % 绘制 \\mu 与误差之间的关系 figure; loglog(mu_values, errors); xlabel(\u0026#39;\\mu (log scale)\u0026#39;); ylabel(\u0026#39;Error\u0026#39;); title(\u0026#39;Regularization Parameter \\mu vs. Reconstruction Error\u0026#39;); 2.4 超参数的作用\n上一点使我们能够评估与反卷积问题相关的内在难度。它还表明，考虑可用的关于重建图像期望正则性的先验信息可以获得更好的结果。这种方法因此使我们能够在两种信息源之间进行折衷：观测数据和可用的 a priori 信息（关于正则性）。这是通过参数 µ 的值来实现的。在本研究中，µ 的值是通过经验选择的，以使反卷积图像既不过于平滑也不过于不规则。\n在这里研究的“玩具示例”中，真实图像已知，即从中生成观测数据的图像已知。\n因此，可以计算反卷积图像 $\\hat{x}$ 和真实图像 $x^*$ 之间的数值差异，作为正则化参数 $\\mu$ 的函数。\n为此，考虑以下三种距离函数： $$ \\Delta_2(\\mu) = \\frac{\\sum_{p,q}(\\hat{x}{p,q}(\\mu) - x^{\\star}{p,q})^2}{\\sum_{p,q}(x^{\\star}{p,q})^2} = \\frac{|\\hat{x}(\\mu) - x^{\\star}|2^2}{|x^{\\star}|2^2} \\ \\Delta_1(\\mu) = \\frac{\\sum{p,q} |\\hat{x}{p,q}(\\mu) - x^{\\star}{p,q}|}{\\sum_{p,q} |x^{\\star}{p,q}|} = \\frac{|\\hat{x}(\\mu) - x^{\\star}|1}{|x^{\\star}|1} \\ \\Delta\\infty(\\mu) = \\frac{\\max{p,q} |\\hat{x}{p,q}(\\mu) - x^{\\star}{p,q}|}{\\max{p,q} |x^{\\star}{p,q}|} = \\frac{|\\hat{x}(\\mu) - x^{\\star}|\\infty}{|x^{\\star}|_\\infty} $$\n当恢复的图像类似于真实图像时，这些距离接近于0，当恢复的图像为零时，它们接近1。\n计算一组 $\\mu$ 值的距离，例如在 $10^{-10}$ 和 $10^{10}$ 之间的对数间隔值。给出最小化每个距离函数的 $\\mu$ 值，并将结果与先前选择的经验值进行比较（应主要关注第二个数据集 Data2）。\n[!IMPORTANT]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 function [best_mu, delta2_values, delta1_values, delta_inf_values] = find_best_mu(y, h, true_image) % y: 输入模糊图像 % h: 脉冲响应（卷积核） % true_image: 已知的真实图像 % 返回最优的 mu 值，以及每个 mu 对应的距离度量结果 % 计算真实图像的不同范数 true_image_norm2 = norm(true_image(:), 2)^2; % 二范数的平方 true_image_norm1 = norm(true_image(:), 1); % 一范数 true_image_norm_inf = norm(true_image(:), Inf); % 无穷范数 H = MyFFT2RI(h, length(y)); % 计算卷积核的傅里叶变换 % H = fft2(h, size(y, 1), size(y, 2)); %如果上面报错 用下面的尺度 Y = MyFFT2(y); % 计算观测图像的傅里叶变换 % 构造正则化滤波器 % 构造D矩阵，使用卷积实现邻近像素差分 D_horiz = [0 0 0; 0 -1 1; 0 0 0]; % 水平方向滤波器 D_vert = [0 0 0; 0 -1 0; 0 1 0]; % 垂直方向滤波器 % 计算D矩阵的傅里叶变换 D_horiz_fft = MyFFT2RI(D_horiz, length(y)); %这里length(y)正确与否不确定 D_vert_fft = MyFFT2RI(D_vert, length(y)); % 构建正则化项的频率表达式 Reg_term = abs(D_horiz_fft).^2 + abs(D_vert_fft).^2; % 正则化参数的范围，取对数间隔 mu_values = logspace(-10, 10, 100); % 存储每个 mu 对应的距离度量值 delta2_values = zeros(length(mu_values), 1); delta1_values = zeros(length(mu_values), 1); delta_inf_values = zeros(length(mu_values), 1); % 逐个计算不同 mu 下的去卷积结果 for i = 1:length(mu_values) mu = mu_values(i); % 构建 Wiener 滤波器 H_conj = conj(H); % 卷积核的复共轭 F = H_conj ./ (abs(H).^2 + mu * Reg_term); % 滤波器 % 使用 Wiener 滤波器对傅里叶域中的观测图像进行滤波 X_est = F .* Y; % 反傅里叶变换返回空间域 x_est = real(MyIFFT2(F)); % 计算三种距离度量 delta2_values(i) = norm(x_est(:) - true_image(:), 2)^2 / true_image_norm2; delta1_values(i) = norm(x_est(:) - true_image(:), 1) / true_image_norm1; delta_inf_values(i) = norm(x_est(:) - true_image(:), Inf) / true_image_norm_inf; end %% 找到使二范数误差最小的 mu [~, min_idx] = min(delta2_values); best_mu = mu_values(min_idx); % 可视化距离度量随 mu 的变化 figure; loglog(mu_values, delta2_values, \u0026#39;r-\u0026#39;, \u0026#39;LineWidth\u0026#39;, 2); hold on; loglog(mu_values, delta1_values, \u0026#39;b-\u0026#39;, \u0026#39;LineWidth\u0026#39;, 2); loglog(mu_values, delta_inf_values, \u0026#39;g-\u0026#39;, \u0026#39;LineWidth\u0026#39;, 2); xlabel(\u0026#39;\\mu\u0026#39;); ylabel(\u0026#39;Distance Metrics\u0026#39;); legend(\u0026#39;\\Delta_2(\\mu)\u0026#39;, \u0026#39;\\Delta_1(\\mu)\u0026#39;, \u0026#39;\\Delta_\\infty(\\mu)\u0026#39;); title(\u0026#39;Distance Metrics vs. \\mu\u0026#39;); grid on; end ","permalink":"https://zehua716.github.io/zh/zh/posts/2023-11-05-%E7%A4%BA%E4%BE%8B%E6%96%87%E7%AB%A0/","summary":"\u003ch1 id=\"图像恢复---------tp1\"\u003e\u003cstrong\u003e图像恢复   \u0026mdash;   TP1\u003c/strong\u003e\u003c/h1\u003e\n\u003ch3 id=\"图像反卷积wiener-hunt-方法\"\u003e\u003cstrong\u003e图像反卷积：Wiener-Hunt 方法\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e主要针对图像去模糊问题，即从模糊(带噪)图像中恢复清晰图像。这属于逆问题的范畴，一半出现在处理真实测量系统时。由于每个测量系统（如温度计、CCD相机、光谱仪等）都受到基础物理学的限制，比如有限精度、有限动态范围、非零响应时间等。这意味着测得的量或多或少都有扭曲。因此这部分是对感兴趣物理量的某种扭曲程度的度量。\u003c/p\u003e\n\u003cp\u003e大多数情况下，测量系统直接给出的测量数据通常具有足够的精度和鲁棒性。但是，也存在测量结果不准确的情况。为了解决精度问题，或者说至少部分地优化它，已经开发了特殊的信号和图像处理技术。在接下来的内容中，我们将通过一个简单的例子来展示此类方法。\u003c/p\u003e\n\u003cp\u003e我们有一张未聚焦的图像。这种情况下，点的图像实际上会是一个斑点。捕获的图像将会因为模糊而受损，因为它是由真实图像中每个点生成的斑点的叠加结果。\u003c/p\u003e\n\u003cp\u003e描述这种转换的最简单模型是线性不变滤波器，即卷积。示意图如下图所示。\u003c/p\u003e\n\u003cp\u003e![image-20240909002355073](/Users/zehua/Library/Application Support/typora-user-images/image-20240909002355073.png)\u003c/p\u003e\n\u003cp\u003e在上面的示意图中，$x_{n,m}$ 代表真实或原始图像，$y_{n,m}$ 代表观测到的图像，或者更确切地说，是我们通过相机拍到的未聚焦图像。添加分量 $b_{n,m}$ 是为了考虑测量和建模误差。\u003c/p\u003e\n\u003cp\u003e描述测量过程的方程(二维)如下：\n$$\ny_{n,m} = \\sum_{p=-P}^{P} \\sum_{q=-Q}^{Q} h_{p,q} x_{n-p,m-q} + b_{n,m}\n$$\n$y_{n,m}$ 是对于每个观测到的像素 $(n, m)$。在这个公式中，$P$ 和 $Q$ 是给定的整数。\u003c/p\u003e\n\u003cp\u003e注意，滤波器通常来说都是低通滤波器，这就意味着它们无法准确地在输出中再现输入信号或图像中的所有分量，因为高频分量要么被强烈衰减，要么完全被拒绝，这也就是为什么 \u0026lsquo;\u0026lsquo;恢复真实信号\u0026rsquo;\u0026lsquo;或者说\u0026rsquo;\u0026lsquo;图像的逆问题\u0026rsquo;\u0026rsquo; 是如此困难：必须恢复那些要么完全不存在、要么“错误”观测到的高频分量。\u003c/p\u003e\n\u003cp\u003e在下面的例子中，我们用线性方法来解决图像反卷积问题。这些线性方法依赖于最小二乘准则，并结合了二次惩罚。我们先介绍其理论部分，包括这些准则及其最小化器。此外，展示背后的技术细节，并提出了一种基于循环近似的方法，以实现快速的数值计算。\u003c/p\u003e\n\u003ch3 id=\"1-一维反卷积\"\u003e1. 一维反卷积\u003c/h3\u003e\n\u003cp\u003e为了简化理论概念，我们先讨论在一维情况下的信号反卷积。这种简化情况允许对反卷积问题的分析更加深入，同时更容易掌握概念和思路。随后再引入二维情况，并将其视为一维情况的扩展。Matlab 实现部分仅涉及二维情况。\u003c/p\u003e\n\u003ch4 id=\"11-一维建模\"\u003e1.1 一维建模\u003c/h4\u003e\n\u003cp\u003e在一维情况下，(1) 中给出的观测模型变为：\u003c/p\u003e\n\u003cp\u003e$$\ny_n = \\sum_{p=-P}^{P} h_p x_{n-p} + b_n\n$$\u003c/p\u003e\n\u003cp\u003e如果我们有 $N$ 个样本，可以将相应的 $N$ 个方程写成矩阵形式：\n$$\n\\mathbf{y} = \\mathbf{H} \\mathbf{x} + \\mathbf{b}\n$$\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e向量 $\\mathbf{y}$ 包含了所有的 $N$ 个观测值（在二维情况下，它将包含模糊的图像）。\u003c/p\u003e","title":"示例文章"},{"content":"关于我 Hi，我是赵化冰，服务网格技术布道者及实践者，腾讯云工程师，曾担任中兴通讯技术专家，Linux 基金会开源项目 ONAP 项目 leader，甲骨文中间件高级顾问等。我创建了服务网格开源项目 Aeraki Mesh（CNCF Sandbox 项目），可以在 Istio 中管理 Dubbo、Thrift、Redis 以及任意私有协议的流量。\n工作联系： zhaohuabing@gmail.com\n出版物 标题 类型 出版社 链接 深入理解 Istio — 云原生服务网格进阶实战 实体书籍 电子工业出版社 购买链接 Distributed Tracing with Jaeger, Kubernetes, and Istio 在线教程 曼宁出版社（美） 30% 折扣 云原生数据中心网络 翻译书籍 中国电力出版社 购买链接 Istio 运维实战 电子书籍 在线阅读 演讲分享 (部分) 年份 城市 会议 分享主题 讲稿 视频 2022 线上 IstioCon Istio + Aeraki 在腾讯音乐的服务网格落地 下载 观看 2022 线上 A2M 全栈服务网格 - Aeraki Mesh 助你在 Istio 服务网格中管理任何七层流量 下载 2022 线上 云原生正发声 Areaki Mesh 在 2022 冬奥会视频直播应用中的服务网格实践 下载 观看 2021 线上 IstioCon How to manage any layer-7 traffic in an Istio service mesh? 下载 观看 2020 线上 CNBPS Istio 流量管理原理与协议扩展 下载 观看 2019 成都 Service Mesher Meetup Service Mesh是下一代SDN吗？ 下载 观看 2019 西安 ONAP Workshop 基于 5G 网络管理系统的服务网格实践 下载 2018 南京 GNTC ONAP 服务网格实践 2017 圣克拉拉 NAP Developer Forum MSB to Support Carrier Grade ONAP Microservice Architecture with Service Mesh 下载 2017 圣克拉拉 ONS Microservice Powered Orchestration 下载 2017 新泽西 ONAP Developer Event MSB Technical Deep Dive and ONAP Use Cases 下载 2017 巴黎 ONAP Developer Event Microservice Bus Tutorial 下载 开源项目 项目 角色 网站 GitHub Aeraki Mesh 创建者 https://aeraki.net http://github.com/aeraki-mesh Istio Contributor https://istio.io https://github.com/istio/istio Envoy Contributor https://www.envoyproxy.io https://github.com/envoyproxy/envoy ONAP 项目 Leader https://www.onap.org hugo-theme-cleanwhite 创建者 https://themes.gohugo.io/themes/hugo-theme-cleanwhite https://github.com/zhaohuabing/hugo-theme-cleanwhite ","permalink":"https://zehua716.github.io/zh/about/","summary":"\u003ch2 id=\"关于我\"\u003e关于我\u003c/h2\u003e\n\u003cp\u003eHi，我是赵化冰，服务网格技术布道者及实践者，\u003ca href=\"https://cloud.tencent.com/product/tcm\"\u003e腾讯云\u003c/a\u003e工程师，曾担任\u003ca href=\"https://www.zte.com.cn/\"\u003e中兴通讯\u003c/a\u003e技术专家，Linux 基金会开源项目 \u003ca href=\"https://www.onap.org/\"\u003eONAP\u003c/a\u003e 项目 leader，甲骨文中间件高级顾问等。我创建了服务网格开源项目 \u003ca href=\"https://aeraki.net\"\u003eAeraki Mesh\u003c/a\u003e（CNCF Sandbox 项目），可以在 Istio 中管理 Dubbo、Thrift、Redis 以及任意私有协议的流量。\u003c/p\u003e\n\u003cp\u003e工作联系： \u003ca href=\"mailto:zhaohuabing@gmail.com\"\u003ezhaohuabing@gmail.com\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"出版物\"\u003e出版物\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e标题\u003c/th\u003e\n          \u003cth\u003e类型\u003c/th\u003e\n          \u003cth\u003e出版社\u003c/th\u003e\n          \u003cth\u003e链接\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.zhaohuabing.com/post/2021-08-26-istio-handbook/\"\u003e深入理解 Istio — 云原生服务网格进阶实战\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e实体书籍\u003c/td\u003e\n          \u003ctd\u003e电子工业出版社\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://item.jd.com/13200745.html\"\u003e购买链接\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.zhaohuabing.com/post/2021-09-08-distributed-tracing-with-jaeger-kubernetes-and-istio/\"\u003eDistributed Tracing with Jaeger, Kubernetes, and Istio\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e在线教程\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.manning.com/\"\u003e曼宁出版社（美）\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.manning.com/liveprojectseries/distributed-tracing-ser\"\u003e30% 折扣\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://zhaohuabing.com/post/2021-08-27-cloud-native-data-center\"\u003e云原生数据中心网络\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e翻译书籍\u003c/td\u003e\n          \u003ctd\u003e中国电力出版社\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://item.jd.com/12929975.html\"\u003e购买链接\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://istio-operation-bible.aeraki.net\"\u003eIstio 运维实战\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e电子书籍\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://istio-operation-bible.aeraki.net\"\u003e在线阅读\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"演讲分享-部分\"\u003e演讲分享 (部分)\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e年份\u003c/th\u003e\n          \u003cth\u003e城市\u003c/th\u003e\n          \u003cth\u003e会议\u003c/th\u003e\n          \u003cth\u003e分享主题\u003c/th\u003e\n          \u003cth\u003e讲稿\u003c/th\u003e\n          \u003cth\u003e视频\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2022\u003c/td\u003e\n          \u003ctd\u003e线上\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://events.istio.io/istiocon-2022\"\u003eIstioCon\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://events.istio.io/istiocon-2022/sessions/tencent-music-aeraki/\"\u003eIstio + Aeraki 在腾讯音乐的服务网格落地\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/slides/tencent-music-service-mesh-practice-with-istio-and-aeraki.pdf\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.youtube.com/watch?v=6t_yPsq4Pi4\"\u003e观看\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2022\u003c/td\u003e\n          \u003ctd\u003e线上\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://a2m.msup.com.cn/course?aid=2699\u0026cid=15382\"\u003eA2M\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://a2m.msup.com.cn/course?aid=2699\u0026cid=15382\"\u003e全栈服务网格 - Aeraki Mesh 助你在 Istio 服务网格中管理任何七层流量\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/slides/full-stack-service-mesh-a2m-20220422.pdf\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2022\u003c/td\u003e\n          \u003ctd\u003e线上\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://cloud.tencent.com/developer/salon/live-1403\"\u003e云原生正发声\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://mp.weixin.qq.com/s/zp9q99mGyH2VD9Dij2owWg\"\u003eAreaki Mesh 在 2022 冬奥会视频直播应用中的服务网格实践\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"http://localhost:1313/img/2022-03-30-aeraki-mesh-winter-olympics-practice/slides.pdf\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://youtu.be/uXxatQTKzW8\"\u003e观看\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2021\u003c/td\u003e\n          \u003ctd\u003e线上\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://events.istio.io/istiocon-2021/\"\u003eIstioCon\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://events.istio.io/istiocon-2021/sessions/how-to-manage-any-layer-7-traffic-in-an-istio-service-mesh/\"\u003eHow to manage any layer-7 traffic in an Istio service mesh?\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/slides/how-to-manage-any-layer-7-traffic-in-istio.pdf\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.youtube.com/watch?v=sBS4utF68d8\"\u003e观看\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2020\u003c/td\u003e\n          \u003ctd\u003e线上\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.cnbpa.org/\"\u003eCNBPS\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://cloud.tencent.com/developer/article/1723804\"\u003eIstio 流量管理原理与协议扩展\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/slides/cnbps2020-istio-aeraki.pdf\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.youtube.com/watch?v=lB5d4qbZqzU\"\u003e观看\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2019\u003c/td\u003e\n          \u003ctd\u003e成都\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://cloudnative.to/blog/service-mesh-meetup-chengdu-20191028/\"\u003eService Mesher Meetup\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://cloudnative.to/blog/service-mesh-meetup-chengdu-20191028/\"\u003eService Mesh是下一代SDN吗？\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/slides/what-can-service-mesh-learn-from-sdn-servicemesher-meetup-20191026.pdf\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://youtu.be/nGkxp-2OsKg\"\u003e观看\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2019\u003c/td\u003e\n          \u003ctd\u003e西安\u003c/td\u003e\n          \u003ctd\u003eONAP Workshop\u003c/td\u003e\n          \u003ctd\u003e基于 5G 网络管理系统的服务网格实践\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/slides/service-mesh-practice-with-5g-management-system-lfn.pdf\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2018\u003c/td\u003e\n          \u003ctd\u003e南京\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.bagevent.com/event/1624048?aId=\"\u003eGNTC\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.sdnlab.com/22596.html\"\u003eONAP 服务网格实践\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2017\u003c/td\u003e\n          \u003ctd\u003e圣克拉拉\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://wiki.onap.org/display/DW/ONAP+Beijing+Release+Developer+Forum%2C+Dec.+11-13%2C+2017%2C+Santa+Clara%2C+CA+US\"\u003eNAP Developer Forum\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://onapbeijing2017.sched.com/event/D5q2\"\u003eMSB to Support Carrier Grade ONAP Microservice Architecture with Service Mesh\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://wiki.onap.org/display/DW/MSB+Service+Mesh+Planning?preview=%2F20873876%2F20873874%2FMSB+to+Support+Carrier+Grade+ONAP+Microservice+Architecture+with+Service+Mesh.pdf\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2017\u003c/td\u003e\n          \u003ctd\u003e圣克拉拉\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://wiki.onap.org/display/DW/ONAP@ONS2017\"\u003eONS\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003eMicroservice Powered Orchestration\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://wiki.onap.org/display/DW/ONAP@ONS2017?preview=%2F3245268%2F3245309%2FMicroservice+Powered+Orchestration+Architecture.pdf\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2017\u003c/td\u003e\n          \u003ctd\u003e新泽西\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://wiki.onap.org/display/DW/ONAP+Project+Developer+Event%3A+May+2+-+5%2C+2017%2C+Middletown%2C+NJ%2C+USA\"\u003eONAP Developer Event\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003eMSB Technical Deep Dive and ONAP Use Cases\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.slideshare.net/HuabingZhao/msb-depp-dive/\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2017\u003c/td\u003e\n          \u003ctd\u003e巴黎\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://wiki.onap.org/display/DW/ONAP+Developer+Event+September+25-28%2C+2017%2C+Paris-Saclay%2C+France\"\u003eONAP Developer Event\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://wiki.onap.org/display/DW/September+26-28+Topics#September2628Topics-M2\"\u003eMicroservice Bus Tutorial\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.slideshare.net/HuabingZhao/microservice-bus-tutorial\"\u003e下载\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"开源项目\"\u003e开源项目\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e项目\u003c/th\u003e\n          \u003cth\u003e角色\u003c/th\u003e\n          \u003cth\u003e网站\u003c/th\u003e\n          \u003cth\u003eGitHub\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eAeraki Mesh\u003c/td\u003e\n          \u003ctd\u003e创建者\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://aeraki.net\"\u003ehttps://aeraki.net\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"http://github.com/aeraki-mesh\"\u003ehttp://github.com/aeraki-mesh\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eIstio\u003c/td\u003e\n          \u003ctd\u003eContributor\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://istio.io\"\u003ehttps://istio.io\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/istio/istio\"\u003ehttps://github.com/istio/istio\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eEnvoy\u003c/td\u003e\n          \u003ctd\u003eContributor\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.envoyproxy.io\"\u003ehttps://www.envoyproxy.io\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/envoyproxy/envoy\"\u003ehttps://github.com/envoyproxy/envoy\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eONAP\u003c/td\u003e\n          \u003ctd\u003e项目 Leader\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.onap.org\"\u003ehttps://www.onap.org\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ehugo-theme-cleanwhite\u003c/td\u003e\n          \u003ctd\u003e创建者\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://themes.gohugo.io/themes/hugo-theme-cleanwhite\"\u003ehttps://themes.gohugo.io/themes/hugo-theme-cleanwhite\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/zhaohuabing/hugo-theme-cleanwhite\"\u003ehttps://github.com/zhaohuabing/hugo-theme-cleanwhite\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":""}]